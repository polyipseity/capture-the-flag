diff --git a/src/.env b/src/.env
new file mode 100644
index 0000000..209e724
--- /dev/null
+++ b/src/.env
@@ -0,0 +1,2 @@
+SECRET="REDACTED"
+FLAG="pearl{fake_flag}"
\ No newline at end of file
diff --git a/../learn HTTP better/src/bot.js b/src/bot.js
index 494807b..d00d6a2 100644
--- a/../learn HTTP better/src/bot.js	
+++ b/src/bot.js
@@ -29,10 +29,11 @@ async function visit(obj){
 			domain: 'localhost',
 			httpOnly: false,
 			secure: true,
-			sameSite: 'None'
+			sameSite: 'None',
+			path: '/'
 		});
 		await page.goto(url,{ waitUntil: 'domcontentloaded', timeout: 3000 });
-		await new Promise(r=>setTimeout(r,10000));
+		await new Promise(r=>setTimeout(r,20000));
 	}catch(e){ console.log(e) }
 	try{await browser.close();}catch(e){}
 	process.exit(0)
diff --git a/../learn HTTP better/src/main.go b/src/main.go
index 6b44005..0c46468 100644
--- a/../learn HTTP better/src/main.go	
+++ b/src/main.go
@@ -32,7 +32,7 @@ func main() {
 	}
 }
 func processClient(connection net.Conn) {
-	buffer := make([]byte, 1024)
+	buffer := make([]byte, 2048)
 	mLen, err := connection.Read(buffer)
 	if err != nil {
 		fmt.Println("Error reading:", err.Error())
@@ -76,10 +76,12 @@ func processClient(connection net.Conn) {
 	}
 
 	splitted_resp := strings.Split(body[0], "\r\n\r\n")
-	new_header := strings.Join([]string{splitted_resp[0], "Content-Security-Policy: script-src 'self'"}, "\r\n")
 
-	final_body := strings.Join([]string{new_header, splitted_resp[1]}, "\r\n\r\n")
+	sanitized_body := strings.Replace(splitted_resp[1], "<", "", -1)
+	sanitized_body = strings.Replace(sanitized_body, ">", "", -1)
 
-	_, err = connection.Write([]byte(final_body))
+	final := strings.Join([]string{splitted_resp[0], sanitized_body}, "\r\n\r\n")
+
+	_, err = connection.Write([]byte(final))
 	connection.Close()
 }
\ No newline at end of file
diff --git a/../learn HTTP better/src/main.js b/src/main.js
index 03c973c..52fec0b 100644
--- a/../learn HTTP better/src/main.js	
+++ b/src/main.js
@@ -18,6 +18,10 @@ app.get("/", (req, res) => {
     res.sendFile(path.join(__dirname, "templates/index.html"))
 })
 
+app.get("/learn", (req, res) => {
+    res.status(200).sendFile(path.join(__dirname, "templates/learn.html"))
+})
+
 const genToken = () => {
     var token = jwt.sign({ id: 1 }, process.env.SECRET);
     return token
@@ -31,7 +35,7 @@ app.post("/check", (req, res) => {
             return res.status(200).send("Body is not provided")
         }
 
-        let to_req = `http://localhost:5001/resp?body=${encodeURI(req_body)}`
+        let to_req = `http://localhost:5001/resp?body=${encodeURIComponent(req_body)}`
 
         childProcess.spawn('node', ['./bot.js', JSON.stringify({
             url: to_req,
diff --git a/../learn HTTP better/src/public/static/css/global.css b/src/public/static/css/global.css
index ef2cd9b..47bdfa5 100644
--- a/../learn HTTP better/src/public/static/css/global.css	
+++ b/src/public/static/css/global.css
@@ -12,6 +12,10 @@ body {
     align-items: center;
 }
 
+h1 {
+    color: rgb(94, 5, 35);
+}
+
 #container {
     display: grid;
     grid-auto-columns: 500px 100px;
@@ -69,4 +73,16 @@ body {
 #adm-msg {
     grid-column: 1/ span 3;
     color: rgb(89, 122, 89);
+}
+
+#form {
+    display: grid;
+    grid-template-columns: 300px 100px;
+    gap: 5px;
+}
+
+#name {
+    grid-column: 1/ span 1;
+    padding: 10px 7px;
+    font-size: 17px;
 }
\ No newline at end of file
diff --git a/../learn HTTP better/src/templates/index.html b/src/templates/index.html
index e037405..6c55091 100644
--- a/../learn HTTP better/src/templates/index.html	
+++ b/src/templates/index.html
@@ -6,43 +6,21 @@
     <link rel="preconnect" href="https://fonts.googleapis.com">
     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
     <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&display=swap" rel="stylesheet">
-    <link rel="stylesheet" href="static/css/global.css"/>
+    <link rel="stylesheet" href="/static/css/global.css"/>
     <title>Learn HTTP</title>
 </head>
 <body>
     <div id="container">
-        <div id="title">Let's learn how HTTP response works!</div>
-        <p id="explain">
-            Refer <a href="https://www.ibm.com/docs/en/cics-ts/6.1?topic=protocol-http-responses">Documentation</a>, enter a sample url-encoded http response below and head to the url to see if your response.<br><br>Ex: HTTP/1.1 200 OK\r\n\r\nhello will be <span style="color: rgb(0, 114, 0);">HTTP%2F1.1%20200%20OK%0D%0A%0D%0Ahello</span>
-        </p>
-        <input class="inp" id="resp-inp" oninput=getURL() placeholder="Enter a raw http response"/>
-        <p id="url"><span id="url-inner"></span></p>
-        <div id="for-adm">
-            <p1 id="adm-title">Not sure if the response looks correct?<br>let admin examine it.</p1>
-            <button id="sub-btn" onclick=check()>Check</button>
-            <p id="adm-msg"></p>
+        <div id="form">
+            <input id="name" placeholder="Enter your name"/>
+            <button style="font-size: 17px;" onclick=submit()>Submit</button>
         </div>
     </div>
+    <script>
+        const submit = () => {
+            document.cookie = `name=${document.getElementById("name").value}; path=/`
+            window.location = "/learn"
+        }
+    </script>
 </body>
-<script>
-    document.getElementById("url-inner").innerText = `${location.protocol}//${location.host}/resp?body=`;
-    const getURL = () => {
-        let resp = document.getElementById("resp-inp").value;
-        document.getElementById("url-inner").innerText = `${location.protocol}//${location.host}/resp?body=${resp}`;
-    }
-
-    const check = async () => {
-        let body = document.getElementById("resp-inp").value;
-        let resp = await fetch("/check", {
-            method: "POST",
-            body: `body=${body}`,
-            headers: {
-                "Content-type": "application/x-www-form-urlencoded"
-            }
-        });
-
-        let msg = await resp.text();
-        document.getElementById("adm-msg").innerText = msg;
-    }
-</script>
 </html>
\ No newline at end of file
diff --git a/src/templates/learn.html b/src/templates/learn.html
new file mode 100644
index 0000000..4304458
--- /dev/null
+++ b/src/templates/learn.html
@@ -0,0 +1,62 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link rel="preconnect" href="https://fonts.googleapis.com">
+    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
+    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&display=swap" rel="stylesheet">
+    <link rel="stylesheet" href="/static/css/global.css"/>
+    <title>Learn HTTP</title>
+</head>
+<body>
+    <div id="container">
+        <p id="greet"></p>
+        <div id="title">Let's learn how HTTP response works!</div>
+        <p id="explain">
+            Refer <a href="https://www.ibm.com/docs/en/cics-ts/6.1?topic=protocol-http-responses">Documentation</a>, enter a sample url-encoded http response below and head to the url to see if your response.<br><br>Ex: HTTP/1.1 200 OK\r\nContent-type: text/plain\r\n\r\nhello will be <span style="color: rgb(0, 114, 0);">HTTP%2F1.1%20200%20OK%0D%0AContent-type%3A%20text%2Fplain%0D%0A%0D%0Ahi</span>
+        </p>
+        <input class="inp" id="resp-inp" oninput=getURL() placeholder="Enter a raw http response"/>
+        <p id="url"><span id="url-inner"></span></p>
+        <div id="for-adm">
+            <p1 id="adm-title">Not sure if the response looks correct?<br>let admin examine it.</p1>
+            <button id="sub-btn" onclick=check()>Check</button>
+            <p id="adm-msg"></p>
+        </div>
+    </div>
+</body>
+<script>
+    function getCookie(name) {
+        var nameEQ = name + "=";
+        var ca = document.cookie.split(';');
+        for(var i=0;i < ca.length;i++) {
+            var c = ca[i];
+            while (c.charAt(0)==' ') c = c.substring(1,c.length);
+            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
+        }
+        return null;
+    }
+
+    document.getElementById("greet").innerHTML = `Hello, ${getCookie("name")}`
+
+    document.getElementById("url-inner").innerText = `${location.protocol}//${location.host}/resp?body=`;
+    const getURL = () => {
+        let resp = document.getElementById("resp-inp").value;
+        document.getElementById("url-inner").innerText = `${location.protocol}//${location.host}/resp?body=${resp}`;
+    }
+
+    const check = async () => {
+        let body = document.getElementById("resp-inp").value;
+        let resp = await fetch("/check", {
+            method: "POST",
+            body: `body=${body}`,
+            headers: {
+                "Content-type": "application/x-www-form-urlencoded"
+            }
+        });
+
+        let msg = await resp.text();
+        document.getElementById("adm-msg").innerText = msg;
+    }
+</script>
+</html>
\ No newline at end of file
